# Names of containers in docker-compose
# - operations-center
# - ha-client-controller-1
# - ha-client-controller-2
# - ha-client-controller-3


global
  maxconn 20000
  daemon

defaults
  mode http
  log global
  option  httplog
  #HA/HS Websocket is required https://www.haproxy.com/documentation/haproxy-configuration-tutorials/load-balancing/websocket/#configure-websockets
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  retries 3
  backlog 10000
  timeout client          50s
  timeout connect          5s
  timeout server          50s
  #HA/HS Websocket is required https://www.haproxy.com/documentation/haproxy-configuration-tutorials/load-balancing/websocket/#configure-websockets
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  option forwardfor # Enables automatic X-Forwarded-For header addition

frontend http-in
  mode    http
  log stdout format raw local0 debug #for additional logging
  bind *:80
  #http-request set-header X-Forwarded-For %[src]
  # Set ACLs depending on host header
  acl is_oc hdr(host) -i oc.ha
  #acl is_oc_path path_beg /cjoc # We don't use sub-path in the demo
  acl is_client_controller hdr(host) -i client.ha
  acl is_jaeger hdr(host) -i jaeger.ha

  # Forward requests based on host header (oc.ha or client.ha)
  use_backend client_controller_ha if is_client_controller
  use_backend oc_ha if is_oc
  use_backend jaeger_ha if is_jaeger


# Operations center backend
backend oc_ha
  server oc operations-center:8080 check
  http-request set-header X-Forwarded-For %[src]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Host %[req.hdr(Host)]

# Client controllers backend (in high availability mode)
backend client_controller_ha
  # balance strategy https://www.haproxy.com/documentation/haproxy-configuration-tutorials/core-concepts/backends/
  balance roundrobin
  log stdout format raw local0 debug
    
  # Enable sticky sessions
  # The insert parameter creates the cookie, 
  # indirect removes the cookie on each incoming request before forwarding the message to the server
  # nocache sets the Cache-Control: private HTTP header so that cache servers between HAProxy and the user wonâ€™t cache the response.
  cookie cloudbees_sticky insert indirect nocache

  option forwardfor   # Forward client IP to Jenkins

  # Store the host and path into separate transaction variables
  #http-request set-var(txn.host) req.hdr(host)
  #http-request set-var(txn.path) path
  # Set the header using concatenation directly in the `http-response set-header` rule
  #http-response set-header X-Your-Header %[var(txn.host)]%[var(txn.path)]
  # Set proper response headers for Jenkins downloads
  #http-response set-header Content-Disposition attachment if { path_end .zip .tar .gz .war }

  # X-Forwarded-Port tells the backend the original port the client connected to.
  http-request set-header X-Forwarded-Port %[dst_port]

  #X-Forwarded-Host tells the backend the original host requested by the client.
  http-request  set-header X-Forwarded-Host %[req.hdr(Host)]

  http-request set-header X-Forwarded-For %[src]

  # Backend servers which receive forwarded requests
  server client_controller_1 ha-client-controller-1:8080 check cookie client_controller_1
  server client_controller_2 ha-client-controller-2:8080 check cookie client_controller_2
  server client_controller_3 ha-client-controller-3:8080 check cookie client_controller_3
  # Healthcheck (to avoid forwarding requests to unreachable servers)
  option httpchk GET /whoAmI/api/json?tree=authenticated
  http-check expect status 200
  default-server inter 2s downinter 1s rise 2 fall 2

# Jager backend
backend jaeger_ha
  server jaeger jaeger:16686 check
  option forwardfor   # Forward client IP to Jenkins
  http-request set-header X-Forwarded-For %[src]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Host %[req.hdr(Host)]
  # Enable compression for UI assets & JSON API
  compression algo gzip
  compression type text/html text/plain text/css application/javascript application/json image/svg+xml
  # Preserve Host if you need same-origin API behavior
  http-request set-header Host jaeger.ha

