# Names of containers in docker-compose
# - operations-center
# - ha-client-controller-1
# - ha-client-controller-2

global
  maxconn 20000
  daemon

defaults
  mode http
  log global
  option  httplog
  option  http-server-close
  option  dontlognull
  option  redispatch
  option  contstats
  retries 3
  backlog 10000
  timeout client          50s
  timeout connect          5s
  timeout server          50s
  timeout tunnel        3600s
  timeout http-keep-alive  1s
  timeout http-request    15s
  timeout queue           30s
  timeout tarpit          60s
  option forwardfor

frontend http-in
  mode    http
  log stdout format raw local0 debug #for additional logging
  bind *:80
  
  # Set ACLs depending on host header
  acl is_oc hdr(host) -i oc.ha
  acl is_client_controller hdr(host) -i client.ha
  
  # Forward requests based on host header (oc.ha or client.ha)
  use_backend client_controller_ha if is_client_controller
  use_backend oc_ha if is_oc

# Operations center backend
backend oc_ha
  server oc operations-center:8080 check

# Client controllers backend (in high availability mode)
backend client_controller_ha
  balance roundrobin
  log stdout format raw local0 debug
    
  # Enable sticky sessions
  # The insert parameter creates the cookie, 
  # indirect removes the cookie on each incoming request before forwarding the message to the server
  # nocache sets the Cache-Control: private HTTP header so that cache servers between HAProxy and the user wonâ€™t cache the response.
  cookie cloudbees_sticky insert indirect nocache
    
  # Backend servers which receive forwarded requests
  server client_controller_1 ha-client-controller-1:8080 check cookie client_controller_1
  server client_controller_2 ha-client-controller-2:8080 check cookie client_controller_2

  # Healthcheck (to avoid forwarding requests to unreachable servers)
  option httpchk GET /whoAmI/api/json?tree=authenticated
  http-check expect status 200
  default-server inter 2s downinter 1s rise 2 fall 2
    
  # Headers
  #http-request set-header X-Forwarded-Port %[dst_port]
  #http-request add-header X-Forwarded-Proto https if { ssl_fc }
  #http-request set-header X-Forwarded-Host %[req.hdr(Host)]
