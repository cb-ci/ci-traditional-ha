# Cloudbees CI high availability for traditional platforms demo
# For more details:
# https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional
# https://www.youtube.com/watch?v=Qkf9HaA2wio

# ! Do not modify docker-compose.yaml directly, it wil be overwritten by up.sh. Instead, modify this template and env.sh

# version attribute is deprecated
#version: '3'
services:
  splunk:
    #image: splunk/splunk:latest
    image: splunk/splunk:9.4
    extra_hosts:
      - "${SPLUNK_URL}:${SPLUNK_IP}"
    platform: linux/amd64
    container_name: splunk
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_PASSWORD=changeme123
    ports:
         - "8000:8000"   # Web UI
         - "8088:8088"   # HEC
         - "8089:8089"   # Management API
         - "9997:9997"   # TCP input
    volumes:
      - ${SPLUNK_PERSISTENCE}/var:/opt/splunk/var
      - ${SPLUNK_PERSISTENCE}/etc:/opt/splunk/etc
    restart: unless-stopped
    networks:
      demo-network:
        ipv4_address: ${SPLUNK_IP}

  inotifywatcher-operations-center:
    image: devodev/inotify:latest
    #image: alpine:latest
    container_name: inotifywatcher-cjoc
    depends_on:
      operations-center:
        condition: service_healthy
    volumes:
      - ${OC_PERSISTENCE}:/var/jenkins_home
    command: >
      inotifywait -m -r /var/jenkins_home
      --format '%T %w%f %e'
      --timefmt '%Y-%m-%d %H:%M:%S'
      -e create -e modify -e delete -e move

  inotifywatcher-controler:
    image: devodev/inotify:latest
    #image: alpine:latest
    container_name: inotifywatcher-controller
    depends_on:
      ha-client-controller-1:
        condition: service_healthy
    volumes:
      - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    command: |
       inotifywait -e modify,create,delete,move --timefmt '%F %T'
       --format '%T %w%f %e' --exclude '.*.log$' -m -r /var/jenkins_home |
       while read -r logLine; do
         tmpLine=$logLine
         case "$logLine" in
           *.xml\ MOVED_TO)
             echo "Detected XML MOVED_TO: $logLine"
             tmpLine=
             ;;
           audit*.log\ MODIFY)
             echo "Detected AUDIT-LOG Entry: $logLine"
             ;;
           #*.xml\ MODIFY)
           #  echo "Detected XML MODIFY: $logLine"
           #  ;;
           #*.xml\ CREATE|*.xml\ DELETE)
           #  echo "Detected XML CREATE|DELETE: $logLine"
           #  ;;
           #*)
           #  # optionally handle other cases or ignore
           #  echo "Detected XML OTHER EVENT: $logLine"
           #  ;;
         esac
       done

  operations-center:
    image: ${DOCKER_IMAGE_OC}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
      - "${CLIENTS_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 50
    environment:
      - JAVA_OPTS=${CJOC_JAVA_OPTS}
      - JENKINS_OPTS=${CJOC_JENKINS_OPTS}
      - CJOC_LOGIN_PW=${CJOC_LOGIN_PW}
      - CJOC_LOGIN_USER=${CJOC_LOGIN_USER}
      - OC_URL=${HTTP_PROTOCOL}://${OC_URL}
    container_name: operations-center
    volumes:
    - ${OC_PERSISTENCE}:/var/jenkins_home
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/jenkins.p12:/tmp/jenkins.p12
    - ./ssl/cacerts:/tmp/cacerts
      # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${OC_IP}
  # Sidecar bunlde-link.yaml init doesent work yet, oc  hostname can not be resolved?
  init-controllers:
    image: curlimages/curl
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    command: ["/bin/sh", "-c", "set -x && curl -v -k -L --user '${CJOC_LOGIN_USER}:${CJOC_LOGIN_PW}' -XGET -o /var/jenkins_home/bundle-link.yaml '${HTTP_PROTOCOL}://operations-center:${HTTP_PORT}/config-bundle-download-link?id=ha' && cat /var/jenkins_home/bundle-link.yaml"]
    healthcheck:
      test: test -f /var/jenkins_home/bundle-link.yaml
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 2s
    depends_on:
      operations-center:
        condition: service_healthy
    volumes:
      - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    networks:
      demo-network:
        ipv4_address: ${INIT_CLIENT_IP}

  ha-client-controller-1:
    image: ${DOCKER_IMAGE_CLIENT_CONTROLLER}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 150
    # Required JAVA and JENKINS Options for HA (active/active)
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional#_java_options
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha/specific-ha-installation-traditional#_jenkins_args
    environment:
      - JAVA_OPTS=${CONTROLLER_JAVA_OPTS}
      - JENKINS_OPTS=${CONTROLLER_JENKINS_OPTS}
      - CONTROLLER_URL=${HTTP_PROTOCOL}://${CLIENTS_URL}
    depends_on:
      - operations-center
      - init-controllers
    # entrypoint: ["sh", "-c", "while [ ! -f /var/jenkins_home/bundle-link.yaml ]; do echo 'wait for bundle-link.yaml' && sleep 1; done;"]

    container_name: ha-client-controller-1
    # Controller 1 is mapping the same underlying dir as controller 2. They share the same jenkins_home
    # Cache dir is different for each
    volumes:
    - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    - ${CONTROLLER1_CACHES}:/var/cache/cloudbees-core-cm
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/jenkins.p12:/tmp/jenkins.p12
    - ./ssl/cacerts:/tmp/cacerts
   # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${CLIENT1_IP}

  ha-client-controller-2:
    image: ${DOCKER_IMAGE_CLIENT_CONTROLLER}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail  ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 150
    # Required JAVA and JENKINS Options for HA (active/active)
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional#_java_options
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha/specific-ha-installation-traditional#_jenkins_args
    environment:
      - JAVA_OPTS=${CONTROLLER_JAVA_OPTS}
      - JENKINS_OPTS=${CONTROLLER_JENKINS_OPTS}
      - CONTROLLER_URL=${HTTP_PROTOCOL}://${CLIENTS_URL}
    depends_on:
      operations-center:
        condition: service_healthy
      ha-client-controller-1:
        condition: service_healthy
    container_name: ha-client-controller-2
    # Controller 2 is mapping the same underlying dir as controller 1. They share the same jenkins_home
    # Cache dir is different for each
    volumes:
    - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    - ${CONTROLLER2_CACHES}:/var/cache/cloudbees-core-cm
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/jenkins.p12:/tmp/jenkins.p12
    - ./ssl/cacerts:/tmp/cacerts
    # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${CLIENT2_IP}

  ha-client-controller-3:
    image: ${DOCKER_IMAGE_CLIENT_CONTROLLER}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail  ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 150
    # Required JAVA and JENKINS Options for HA (active/active)
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional#_java_options
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha/specific-ha-installation-traditional#_jenkins_args
    environment:
      - JAVA_OPTS=${CONTROLLER_JAVA_OPTS}
      - JENKINS_OPTS=${CONTROLLER_JENKINS_OPTS}
      - CONTROLLER_URL=${HTTP_PROTOCOL}://${CLIENTS_URL}
    depends_on:
      operations-center:
        condition: service_healthy
      ha-client-controller-1:
        condition: service_healthy
    container_name: ha-client-controller-3
    # Controller 2 is mapping the same underlying dir as controller 1. They share the same jenkins_home
    # Cache dir is different for each
    volumes:
    - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    - ${CONTROLLER2_CACHES}:/var/cache/cloudbees-core-cm
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/jenkins.p12:/tmp/jenkins.p12
    - ./ssl/cacerts:/tmp/cacerts
    # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${CLIENT3_IP}

  agent:
    image: ${DOCKER_IMAGE_JENKINS_SSH_AGENT}
    privileged: true
    user: root
    container_name: ssh-agent
    volumes:
    - ${AGENT_PERSISTENCE}:/home/jenkins/
    networks:
      demo-network:
        ipv4_address: ${AGENT_IP}
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=${JENKINS_AGENT_SSH_PUBKEY}


  haproxy:
    image: ${DOCKER_IMAGE_HAPROXY}
    volumes:
      - ${HA_PROXY_CONFIG}:/usr/local/etc/haproxy/haproxy.cfg
    #{% if ssl == "true" %}
      - ./ssl/haproxy.pem:/etc/ssl/certs/haproxy.pem
    # {% endif %}
    ports:
      - "${HA_PROXY_BIND_PORT}:${HA_PROXY_BIND_PORT}"
    networks:
      demo-network:
        ipv4_address: ${HAPROXY_IP}
    depends_on:
      ha-client-controller-1:
        condition: service_healthy
    extra_hosts:
      - "${OC_URL}:${OC_IP}"

  browser:
    image: ${DOCKER_IMAGE_BROWSER_BOX}
    container_name: webtop
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - SUBFOLDER=/ #optional
      - TITLE=Webtop #optional
    volumes:
      - ${BROWSER_PERSISTENCE}:/config
    ports:
      - 3000:3000
      - 3001:3001
    #devices:
    #  - /dev/dri:/dev/dri #optional
    shm_size: "2gb" #optional
    restart: unless-stopped
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
      - "${CLIENTS_URL}:${HAPROXY_IP}"
    networks:
      demo-network:
        ipv4_address: ${BROWSER_IP}

networks:
  demo-network:
    driver: bridge
    #driver_opts:
    #  com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
    ipam:
      config:
        - subnet: ${IP_PREFIX}.0.0/16
