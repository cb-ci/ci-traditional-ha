# Cloudbees CI high availability for traditional platforms demo
# For more details:
# https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional
# https://www.youtube.com/watch?v=Qkf9HaA2wio

# ! Do not modify docker-compose.yaml directly, it wil be overwritten by up.sh. Instead, modify this template and env.sh

version: '3'
services:
  operations-center:
    image: ${DOCKER_IMAGE_OC}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
      - "${CLIENTS_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 50
    environment:
      - JAVA_OPTS=${CJOC_JAVA_OPTS}
      - JENKINS_OPTS=${CJOC_JENKINS_OPTS}
      - CJOC_LOGIN_PW=${CJOC_LOGIN_PW}
      - CJOC_LOGIN_USER=${CJOC_LOGIN_USER}
      - OC_URL=${HTTP_PROTOCOL}://${OC_URL}
    container_name: operations-center
    volumes:
    - ${OC_PERSISTENCE}:/var/jenkins_home
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/cacerts:/tmp/cacerts
      # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${OC_IP}

  ha-client-controller-1:
    image: ${DOCKER_IMAGE_CLIENT_CONTROLLER}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 50
    # Required JAVA and JENKINS Options for HA (active/active)
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional#_java_options
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha/specific-ha-installation-traditional#_jenkins_args
    environment:
      - JAVA_OPTS=${CONTROLLER_JAVA_OPTS}
      - JENKINS_OPTS=${CONTROLLER_JENKINS_OPTS}
      - CONTROLLER_URL="${HTTP_PROTOCOL}://${CLIENTS_URL}"
    depends_on:
      operations-center:
        condition: service_healthy
    container_name: ha-client-controller-1
    # Controller 1 is mapping the same underlying dir as controller 2. They share the same jenkins_home
    # Cache dir is different for each
    volumes:
    - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    - ${CONTROLLER1_CACHES}:/var/cache/cloudbees-core-cm
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/cacerts:/tmp/cacerts
   # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${CLIENT1_IP}

  ha-client-controller-2:
    image: ${DOCKER_IMAGE_CLIENT_CONTROLLER}
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
    healthcheck:
      test: curl -k --fail  ${HTTP_PROTOCOL}://localhost:${HTTP_PORT}/whoAmI/api/json?tree=authenticated || exit 1
      interval: 3s
      timeout: 3s
      retries: 50
    # Required JAVA and JENKINS Options for HA (active/active)
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha-install-guide/specific-ha-installation-traditional#_java_options
    # https://docs.cloudbees.com/docs/cloudbees-ci/latest/ha/specific-ha-installation-traditional#_jenkins_args
    environment:
      - JAVA_OPTS=${CONTROLLER_JAVA_OPTS}
      - JENKINS_OPTS=${CONTROLLER_JENKINS_OPTS}
      - CONTROLLER_URL="${HTTP_PROTOCOL}://${CLIENTS_URL}"
    depends_on:
      operations-center:
        condition: service_healthy
      ha-client-controller-1:
        condition: service_healthy
    container_name: ha-client-controller-2
    # Controller 2 is mapping the same underlying dir as controller 1. They share the same jenkins_home
    # Cache dir is different for each
    volumes:
    - ${CONTROLLER_PERSISTENCE}:/var/jenkins_home
    - ${CONTROLLER2_CACHES}:/var/cache/cloudbees-core-cm
    #{% if ssl == "true" %}
    - ./ssl/jenkins.jks:/tmp/jenkins.jks
    - ./ssl/cacerts:/tmp/cacerts
    # {% endif %}
    networks:
      demo-network:
        ipv4_address: ${CLIENT2_IP}

  agent:
    image: ${DOCKER_IMAGE_JENKINS_SSH_AGENT}
    privileged: true
    user: root
    container_name: ssh-agent
    volumes:
    - ${AGENT_PERSISTENCE}:/home/jenkins/
    networks:
      demo-network:
        ipv4_address: ${AGENT_IP}
    environment:
      - JENKINS_AGENT_SSH_PUBKEY=${JENKINS_AGENT_SSH_PUBKEY}

  haproxy:
    image: ${DOCKER_IMAGE_HAPROXY}
    volumes:
      - ${HA_PROXY_CONFIG}:/usr/local/etc/haproxy/haproxy.cfg
    #{% if ssl == "true" %}
      - ./ssl/jenkins.pem:/tmp/jenkins.pem
    # {% endif %}
    ports:
      - "${HA_PROXY_BIND_PORT}:${HA_PROXY_BIND_PORT}"
    networks:
      demo-network:
        ipv4_address: ${HAPROXY_IP}
    depends_on:
      ha-client-controller-1:
        condition: service_healthy
    extra_hosts:
      - "${OC_URL}:${OC_IP}"

  browser:
    image: ${DOCKER_IMAGE_BROWSER_BOX}
    container_name: webtop
    security_opt:
      - seccomp:unconfined #optional
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - SUBFOLDER=/ #optional
      - TITLE=Webtop #optional
    volumes:
      - ${BROWSER_PERSISTENCE}:/config
    ports:
      - 3000:3000
      - 3001:3001
    #devices:
    #  - /dev/dri:/dev/dri #optional
    shm_size: "2gb" #optional
    restart: unless-stopped
    extra_hosts:
      - "${OC_URL}:${HAPROXY_IP}"
      - "${CLIENTS_URL}:${HAPROXY_IP}"
    networks:
      demo-network:
        ipv4_address: ${BROWSER_IP}

networks:
  demo-network:
    driver: bridge
    #driver_opts:
    #  com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
    ipam:
      config:
        - subnet: ${IP_PREFIX}.0.0/16
